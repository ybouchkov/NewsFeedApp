//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `Painting_With_Chocolate.ttf`.
    static let painting_With_ChocolateTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Painting_With_Chocolate", pathExtension: "ttf")
    /// Resource file `Pentay-Book-FFP.ttf`.
    static let pentayBookFFPTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Pentay-Book-FFP", pathExtension: "ttf")
    /// Resource file `Pentay-Book-Italic-FFP.ttf`.
    static let pentayBookItalicFFPTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Pentay-Book-Italic-FFP", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "Painting_With_Chocolate", withExtension: "ttf")`
    static func painting_With_ChocolateTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.painting_With_ChocolateTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Pentay-Book-FFP", withExtension: "ttf")`
    static func pentayBookFFPTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pentayBookFFPTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Pentay-Book-Italic-FFP", withExtension: "ttf")`
    static func pentayBookItalicFFPTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pentayBookItalicFFPTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `PaintingWithChocolate`.
    static let paintingWithChocolate = Rswift.FontResource(fontName: "PaintingWithChocolate")
    /// Font `Pentay-Book`.
    static let pentayBook = Rswift.FontResource(fontName: "Pentay-Book")
    /// Font `PentayBook-Italic`.
    static let pentayBookItalic = Rswift.FontResource(fontName: "PentayBook-Italic")
    
    /// `UIFont(name: "PaintingWithChocolate", size: ...)`
    static func paintingWithChocolate(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: paintingWithChocolate, size: size)
    }
    
    /// `UIFont(name: "Pentay-Book", size: ...)`
    static func pentayBook(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: pentayBook, size: size)
    }
    
    /// `UIFont(name: "PentayBook-Italic", size: ...)`
    static func pentayBookItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: pentayBookItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.pentayBook(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Pentay-Book' could not be loaded, is 'Pentay-Book-FFP.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.pentayBookItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PentayBook-Italic' could not be loaded, is 'Pentay-Book-Italic-FFP.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.paintingWithChocolate(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PaintingWithChocolate' could not be loaded, is 'Painting_With_Chocolate.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `NewsFeed`.
    static let newsFeed = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewsFeed")
    /// Image `login_disable`.
    static let login_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_disable")
    /// Image `login_enable`.
    static let login_enable = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_enable")
    /// Image `newspaper`.
    static let newspaper = Rswift.ImageResource(bundle: R.hostingBundle, name: "newspaper")
    
    /// `UIImage(named: "NewsFeed", bundle: ..., traitCollection: ...)`
    static func newsFeed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newsFeed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_disable", bundle: ..., traitCollection: ...)`
    static func login_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_enable", bundle: ..., traitCollection: ...)`
    static func login_enable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_enable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "newspaper", bundle: ..., traitCollection: ...)`
    static func newspaper(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newspaper, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LoginScene`.
    static let loginScene = _R.storyboard.loginScene()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LoginScene", bundle: ...)`
    static func loginScene(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.loginScene)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 3 localization keys.
    struct localizable {
      /// Base translation: More info
      /// 
      /// Locales: Base, bg-BG
      static let lbl_info = Rswift.StringResource(key: "lbl_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "bg-BG"], comment: nil)
      /// Base translation: password
      /// 
      /// Locales: Base, bg-BG
      static let placeholder_password = Rswift.StringResource(key: "placeholder_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "bg-BG"], comment: nil)
      /// Base translation: user
      /// 
      /// Locales: Base, bg-BG
      static let placeholder_user = Rswift.StringResource(key: "placeholder_user", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "bg-BG"], comment: nil)
      
      /// Base translation: More info
      /// 
      /// Locales: Base, bg-BG
      static func lbl_info(_: Void = ()) -> String {
        return NSLocalizedString("lbl_info", bundle: R.hostingBundle, value: "More info", comment: "")
      }
      
      /// Base translation: password
      /// 
      /// Locales: Base, bg-BG
      static func placeholder_password(_: Void = ()) -> String {
        return NSLocalizedString("placeholder_password", bundle: R.hostingBundle, value: "password", comment: "")
      }
      
      /// Base translation: user
      /// 
      /// Locales: Base, bg-BG
      static func placeholder_user(_: Void = ()) -> String {
        return NSLocalizedString("placeholder_user", bundle: R.hostingBundle, value: "user", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.loginScene` struct is generated, and contains static references to 3 localization keys.
    struct loginScene {
      /// bg-BG translation: Label
      /// 
      /// Locales: bg-BG
      static let fhLCRr2Text = Rswift.StringResource(key: "5fh-LC-rr2.text", tableName: "LoginScene", bundle: R.hostingBundle, locales: ["bg-BG"], comment: nil)
      /// bg-BG translation: password
      /// 
      /// Locales: bg-BG
      static let jixg7IEKPlaceholder = Rswift.StringResource(key: "JIX-g7-IEK.placeholder", tableName: "LoginScene", bundle: R.hostingBundle, locales: ["bg-BG"], comment: nil)
      /// bg-BG translation: user
      /// 
      /// Locales: bg-BG
      static let ysVCQXUPlaceholder = Rswift.StringResource(key: "3Ys-vC-QXU.placeholder", tableName: "LoginScene", bundle: R.hostingBundle, locales: ["bg-BG"], comment: nil)
      
      /// bg-BG translation: Label
      /// 
      /// Locales: bg-BG
      static func fhLCRr2Text(_: Void = ()) -> String {
        return NSLocalizedString("5fh-LC-rr2.text", tableName: "LoginScene", bundle: R.hostingBundle, comment: "")
      }
      
      /// bg-BG translation: password
      /// 
      /// Locales: bg-BG
      static func jixg7IEKPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("JIX-g7-IEK.placeholder", tableName: "LoginScene", bundle: R.hostingBundle, comment: "")
      }
      
      /// bg-BG translation: user
      /// 
      /// Locales: bg-BG
      static func ysVCQXUPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("3Ys-vC-QXU.placeholder", tableName: "LoginScene", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try loginScene.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "NewsFeed") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NewsFeed' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct loginScene: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController
      
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "LoginScene"
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "newspaper") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'newspaper' is used in storyboard 'LoginScene', but couldn't be loaded.") }
        if _R.storyboard.loginScene().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'LoginScene' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
